{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPsFRHmHa8MZwRYn/Mb4FM0"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"9c3GQBAhybZO"},"outputs":[],"source":["#static: variable and function\n","\n","#1. staticvariable: claas member variables are\n","\n","#by default static\n","\n","#accessed: with the help of\n","\n","#class name and object name\n","\n","#throught out the program single copy exists\n","\n","#if no object is created still it creates\n","\n","#copy of static variable\n","\n","\n","#2.staticfunction: static function single copy exists\n","\n","#call by class name and object name\n","\n","#@staticmethod decorator used to create static function\n","\n","#self used in static function when you\n","\n","#pass object name while call to static function"]},{"cell_type":"code","source":["print(\"Checking notepad is connect\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZJt3l3pHyuNQ","executionInfo":{"status":"ok","timestamp":1741756860129,"user_tz":-330,"elapsed":24,"user":{"displayName":"Ibrahim Shaikh","userId":"05058260396482341273"}},"outputId":"bdc76b23-2f85-44e9-b667-b05d9432e921"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Checking notepad is connect\n"]}]},{"cell_type":"markdown","source":["Constructor"],"metadata":{"id":"ltVAvVrey5FQ"}},{"cell_type":"code","source":["#Constructor\n","\n","#1. used to initialize object\n","\n","#when object is creteated constructor called\n","\n","# automatically\n","\n","#no need to call constructor\n","\n","# when we cant create our own constructor compiler\n","\n","#will call his own defualt constructor.\n","\n","#2 types of constructor\n","\n","# 1. default constructor\n","\n","# 2. Parameterised constructor"],"metadata":{"id":"FIgb6Jbdyf_n"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Ex:\n","    def __init__(self):\n","        print(\"hello\")\n","s=Ex()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7tejJ_X31miX","executionInfo":{"status":"ok","timestamp":1741757609681,"user_tz":-330,"elapsed":108,"user":{"displayName":"Ibrahim Shaikh","userId":"05058260396482341273"}},"outputId":"2962b79d-b7f6-4cf4-9d18-e5d41050a5ea"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["hello\n"]}]},{"cell_type":"code","source":["class Ex:\n","    def __init__(self,a, b):\n","        self.a = a\n","        self.b = b\n","        print(a, b)\n","s=Ex(10,20)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TS65EFQ31_rt","executionInfo":{"status":"ok","timestamp":1741758823341,"user_tz":-330,"elapsed":112,"user":{"displayName":"Ibrahim Shaikh","userId":"05058260396482341273"}},"outputId":"cf52e58d-f73d-4962-dbfc-aec2f372dee3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["10 20\n"]}]},{"cell_type":"code","source":["#destructor: used in python\n","\n","# 1. to destroy the object\n","\n","# 3. no need to call destructor.\n","\n","# 4. _ del (1) method is used for destructor\n","\n","# 5. it is called when object goes out of scope."],"metadata":{"id":"uzq34mMR2huh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Ex:\n","    def __init__(self, a):\n","        self.a = a\n","        print(\"default con\")\n","    def __del__(self):\n","        print(self.a)\n","        print(\"dist\")\n","        print(self.a)\n","e=Ex(10)\n","print(id(e))\n","del e\n","#e= 10\n","print(id(e))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":332},"id":"fUs8s5wx5ZHZ","executionInfo":{"status":"error","timestamp":1741759219547,"user_tz":-330,"elapsed":19,"user":{"displayName":"Ibrahim Shaikh","userId":"05058260396482341273"}},"outputId":"cb5992d1-5f99-470b-c30c-889064a9b1e8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["default con\n","138603767273296\n","10\n","dist\n","10\n"]},{"output_type":"error","ename":"NameError","evalue":"name 'e' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-19-257fb9cffbb2>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;32mdel\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;31m#e= 10\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'e' is not defined"]}]},{"cell_type":"code","source":["class Ex:\n","    def __init__(self,a):\n","        self.a = a\n","        print(\"Default Const\")\n","    def __del__(self):\n","        print(self.a)\n","        print(\"Dist\")\n","        print(self.a)\n","e=Ex(10)\n","print(id(e))\n","del e\n","e = 10\n","print(id(e))"],"metadata":{"id":"2wGalRIh8JBB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1741770218400,"user_tz":-330,"elapsed":41,"user":{"displayName":"Ibrahim Shaikh","userId":"05058260396482341273"}},"outputId":"6101510f-ed96-4c8d-a30d-78a8bda11f66"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Default Const\n","137229739890064\n","10\n","Dist\n","10\n","10751144\n"]}]},{"cell_type":"code","source":["class Shape():\n","    def area(self):\n","        print(\"from shape class\")\n","\n","\n","class circle(Shape):\n","    def area1(self):\n","        print(\"from circle class\")\n","c = circle()\n","s = Shape()"],"metadata":{"id":"yMxFuq7ImGJR","executionInfo":{"status":"ok","timestamp":1741770228923,"user_tz":-330,"elapsed":18,"user":{"displayName":"Ibrahim Shaikh","userId":"05058260396482341273"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["class University:\n","    def result(self, r):\n","        self.r = r\n","\n","class College(University):\n","    def dispt(self):\n","        self.result(90)\n","        print(\"College result\", self.r)\n","\n","class Student(College):\n","    pass\n","\n","s = Student()\n","s.dispt()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ao0UXRAimJCK","executionInfo":{"status":"ok","timestamp":1741770253393,"user_tz":-330,"elapsed":114,"user":{"displayName":"Ibrahim Shaikh","userId":"05058260396482341273"}},"outputId":"bd0b80c9-14ae-45f2-9291-acc3b4eacad2"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["College result 90\n"]}]},{"cell_type":"code","source":["class Deposit:\n","    def deposit(self, balance, amount):\n","        if amount > 0:\n","            balance += amount\n","            return balance, f\"Deposited ${amount}. New balance: ${balance}\"\n","        else:\n","            return balance, \"Invalid deposit amount\"\n","\n","class Withdraw:\n","    def withdraw(self, balance, amount):\n","        if amount > 0:\n","            if balance >= amount:\n","                balance -= amount\n","                return balance, f\"Withdrew ${amount}. New balance: ${balance}\"\n","            else:\n","                return balance, \"Insufficient funds\"\n","        else:\n","            return balance, \"Invalid withdrawal amount\"\n","\n","class Bank(Deposit, Withdraw):\n","    def __init__(self, balance=0):\n","        self.balance = balance\n","\n","    def check_balance(self):\n","        return f\"Current balance: ${self.balance}\"\n","\n","    def main(self):\n","        print(\"Welcome to the Simple Banking System\")\n","\n","        while True:\n","            print(\"\\n1. Check Balance\")\n","            print(\"2. Deposit Money\")\n","            print(\"3. Withdraw Money\")\n","            print(\"4. Exit\")\n","\n","            choice = input(\"Enter your choice (1-4): \")\n","\n","            if choice == '1':\n","                print(self.check_balance())\n","            elif choice == '2':\n","                amount = float(input(\"Enter amount to deposit: $\"))\n","                self.balance, message = self.deposit(self.balance, amount)\n","                print(message)\n","            elif choice == '3':\n","                amount = float(input(\"Enter amount to withdraw: $\"))\n","                self.balance, message = self.withdraw(self.balance, amount)\n","                print(message)\n","            elif choice == '4':\n","                print(\"Thank you for using our banking system. Goodbye!\")\n","                break\n","            else:\n","                print(\"Invalid choice. Please try again.\")\n","\n","bank = Bank(float(input(\"Enter initial balance: $\")))\n","bank.main()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NA9J0WP4mOqP","executionInfo":{"status":"ok","timestamp":1741770299068,"user_tz":-330,"elapsed":31659,"user":{"displayName":"Ibrahim Shaikh","userId":"05058260396482341273"}},"outputId":"7a3abff9-b7ae-4242-82bb-b5ac3b2542ea"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter initial balance: $2000\n","Welcome to the Simple Banking System\n","\n","1. Check Balance\n","2. Deposit Money\n","3. Withdraw Money\n","4. Exit\n","Enter your choice (1-4): 1\n","Current balance: $2000.0\n","\n","1. Check Balance\n","2. Deposit Money\n","3. Withdraw Money\n","4. Exit\n","Enter your choice (1-4): 2\n","Enter amount to deposit: $200\n","Deposited $200.0. New balance: $2200.0\n","\n","1. Check Balance\n","2. Deposit Money\n","3. Withdraw Money\n","4. Exit\n","Enter your choice (1-4): 3\n","Enter amount to withdraw: $1000\n","Withdrew $1000.0. New balance: $1200.0\n","\n","1. Check Balance\n","2. Deposit Money\n","3. Withdraw Money\n","4. Exit\n","Enter your choice (1-4): 4\n","Thank you for using our banking system. Goodbye!\n"]}]},{"cell_type":"code","source":["\n","a = 90\n","m = 89\n","class Sport:\n","      def marks(self):\n","          print(\"Extra Mark's Is : \",m)\n","class Academic(Sport):\n","      def am(self):\n","          super().marks()\n","          print(\"Academic Marks Is : \",a)\n","class Student(Academic):\n","      def display(self):\n","          super().am()\n","          t = m + a\n","          print(\"Total Marks Is : \",t)\n","S = Student()\n","S.display()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"85GMCAw0mapS","executionInfo":{"status":"ok","timestamp":1741771071376,"user_tz":-330,"elapsed":13,"user":{"displayName":"Ibrahim Shaikh","userId":"05058260396482341273"}},"outputId":"9ccb4f4a-92ab-40fb-e061-01866d57e162"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Extra Mark's Is :  89\n","Academic Marks Is :  90\n","Total Marks Is :  179\n"]}]},{"cell_type":"code","source":["class A:\n","    def __init__(self):\n","        self.a = 90\n","        print(\"This is A class : \",self.a)\n","class B(A):\n","     def __init__(self):\n","         super().__init__()\n","         self.b = 80\n","         print(\"This is B class : \",self.b)\n","         print(\"This is A class variable calling from class B : \",self.a)\n","b=B()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"--KcP0y7pufo","executionInfo":{"status":"ok","timestamp":1741771584214,"user_tz":-330,"elapsed":23,"user":{"displayName":"Ibrahim Shaikh","userId":"05058260396482341273"}},"outputId":"9bc73548-4cea-4fc2-b5b0-a6bc70c39294"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["This is A class :  90\n","This is B class :  80\n","This is A class variable calling from class B :  90\n"]}]},{"cell_type":"code","source":["class A:\n","     def add(self,a,b, c=0):\n","         if c == 0:\n","            return a+b\n","         else:\n","            return a+b+c\n","a=A()\n","print(\"Theree Parameters Function :\",a.add(10, 20,30))\n","print(\"Two Parameters Function :\",a.add(10, 20))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PVNv-mpgrUXz","executionInfo":{"status":"ok","timestamp":1741773284376,"user_tz":-330,"elapsed":13,"user":{"displayName":"Ibrahim Shaikh","userId":"05058260396482341273"}},"outputId":"6cd8503b-2ed3-47fb-eff9-6480b5cb1136"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Theree Parameters Function : 60\n","Two Parameters Function : 30\n"]}]},{"cell_type":"code","source":["class A:\n","     def add(self,*a):\n","         return sum(a)\n","a=A()\n","print(\"Theree Parameters Function :\",a.add(10, 20,30))\n","print(\"Two Parameters Function :\",a.add(10, 20))\n","print(\"Two Parameters Function :\",a.add(10, 20,30,40))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a72-OEkdxzfM","executionInfo":{"status":"ok","timestamp":1741773578987,"user_tz":-330,"elapsed":12,"user":{"displayName":"Ibrahim Shaikh","userId":"05058260396482341273"}},"outputId":"37658f63-489f-4bc5-d636-cb7e8e21a7d5"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["Theree Parameters Function : 60\n","Two Parameters Function : 30\n","Two Parameters Function : 100\n"]}]},{"cell_type":"code","source":["class A:\n","     def car(self):\n","         print(\"Maruti\")\n","class B(A):\n","     def car(self):\n","         #super().car()\n","         print(\"BMW\")\n","\n","b=B()\n","b.car()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9-odHWhmy6kz","executionInfo":{"status":"ok","timestamp":1741774575759,"user_tz":-330,"elapsed":9,"user":{"displayName":"Ibrahim Shaikh","userId":"05058260396482341273"}},"outputId":"8c768bec-1cd0-44a6-a038-f21828568d07"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["BMW\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"HYkwP3bO2t1t"},"execution_count":null,"outputs":[]}]}